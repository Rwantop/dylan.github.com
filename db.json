{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/avatar.png","path":"avatar.png","modified":0,"renderable":0},{"_id":"source/icons/icon-128x128.png","path":"icons/icon-128x128.png","modified":0,"renderable":0},{"_id":"source/icons/icon-144x144.png","path":"icons/icon-144x144.png","modified":0,"renderable":0},{"_id":"source/icons/icon-152x152.png","path":"icons/icon-152x152.png","modified":0,"renderable":0},{"_id":"source/icons/icon-192x192.png","path":"icons/icon-192x192.png","modified":0,"renderable":0},{"_id":"source/icons/icon-384x384.png","path":"icons/icon-384x384.png","modified":0,"renderable":0},{"_id":"source/icons/icon-512x512.png","path":"icons/icon-512x512.png","modified":0,"renderable":0},{"_id":"source/icons/icon-72x72.png","path":"icons/icon-72x72.png","modified":0,"renderable":0},{"_id":"source/icons/icon-96x96.png","path":"icons/icon-96x96.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.eot","path":"lib/vazir-font/Vazir-Regular.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.ttf","path":"lib/vazir-font/Vazir-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff","path":"lib/vazir-font/Vazir-Regular.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff2","path":"lib/vazir-font/Vazir-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.eot","path":"lib/vazir-font/Vazir-Variable.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.ttf","path":"lib/vazir-font/Vazir-Variable.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff","path":"lib/vazir-font/Vazir-Variable.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff2","path":"lib/vazir-font/Vazir-Variable.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.ttf","path":"lib/font-awesome/webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.woff2","path":"lib/font-awesome/webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"238842003c189b4bb91417fae2da053d5e7e2628","modified":1739952523474},{"_id":"source/avatar.png","hash":"2a9660fa22eb06b7fc3bf8c727f13d5f8c0b077e","modified":1739952523474},{"_id":"source/_posts/hello-world.md","hash":"cd696c7ead52044441366243442986ab6813a49c","modified":1739954335264},{"_id":"source/about/index.md","hash":"8fe1e504bd32cf47b6370b3c1493887efdacc6b6","modified":1739952523474},{"_id":"source/icons/icon-128x128.png","hash":"7504abb2c8d4854aa7b1b6549fc778f593f56711","modified":1739952523474},{"_id":"source/icons/icon-144x144.png","hash":"a76f9d67dc3c60731fcdbda4f867a7fed534e4ea","modified":1739952523474},{"_id":"source/icons/icon-192x192.png","hash":"9ae86339d4839844c6416e3a1df67d068085f2a1","modified":1739952523474},{"_id":"source/icons/icon-152x152.png","hash":"156aaa3ece041a2e7b3e1f6b9a01cba94fa34386","modified":1739952523474},{"_id":"source/icons/icon-384x384.png","hash":"9e12a20544379a73660e659c381f99a669e5276e","modified":1739952523474},{"_id":"source/icons/icon-512x512.png","hash":"9e12a20544379a73660e659c381f99a669e5276e","modified":1739952523474},{"_id":"source/icons/icon-72x72.png","hash":"ef4946788f89225b863a783c2290d31c98d2a6a8","modified":1739952523474},{"_id":"source/icons/icon-96x96.png","hash":"c4564a49cd455744dcdd59aedd5745f1972c42f0","modified":1739952523474},{"_id":"source/categories/index.md","hash":"a19bc95d2d34f2ee3a2cb246acbb0aa75163ac59","modified":1739952523474},{"_id":"source/tags/index.md","hash":"cc444bbd1ffec9502ead0744c842ee75caaadc8b","modified":1739954474504},{"_id":"source/projects/index.md","hash":"1f7448510fc47d77cb07e9ea50a01fbb87d52237","modified":1739952523474},{"_id":"public/about/index.html","hash":"5cbb47503a530f262f7b9a32f26927c3712dfc48","modified":1739956858417},{"_id":"public/tags/index.html","hash":"bcd1f596459a8accd6a33fb005bec9649bfd20bb","modified":1739956858417},{"_id":"public/categories/index.html","hash":"b0f6f04b4931f5f1fb6c435fd2011dcbd7d10c69","modified":1739956858417},{"_id":"public/projects/index.html","hash":"47ca5294c44153a5368aa9380102c40dbb379b9d","modified":1739956858417},{"_id":"public/2025/02/19/hello-world/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1739952973619},{"_id":"public/archives/index.html","hash":"8375dc698a42122dc7747209a8f54aa21515de35","modified":1739956858417},{"_id":"public/archives/2025/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1739952973619},{"_id":"public/archives/2025/02/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1739952973619},{"_id":"public/tags/test/index.html","hash":"3666b0f829b928394c010422929e07c9a5938a0c","modified":1739956858417},{"_id":"public/index.html","hash":"72153627a17de39e46304be05ae4416f6b5175ae","modified":1739956858417},{"_id":"public/CNAME","hash":"238842003c189b4bb91417fae2da053d5e7e2628","modified":1739952973619},{"_id":"public/avatar.png","hash":"2a9660fa22eb06b7fc3bf8c727f13d5f8c0b077e","modified":1739952973619},{"_id":"public/icons/icon-144x144.png","hash":"a76f9d67dc3c60731fcdbda4f867a7fed534e4ea","modified":1739952973619},{"_id":"public/icons/icon-128x128.png","hash":"7504abb2c8d4854aa7b1b6549fc778f593f56711","modified":1739952973619},{"_id":"public/icons/icon-192x192.png","hash":"9ae86339d4839844c6416e3a1df67d068085f2a1","modified":1739952973619},{"_id":"public/icons/icon-384x384.png","hash":"9e12a20544379a73660e659c381f99a669e5276e","modified":1739952973619},{"_id":"public/icons/icon-152x152.png","hash":"156aaa3ece041a2e7b3e1f6b9a01cba94fa34386","modified":1739952973619},{"_id":"public/icons/icon-512x512.png","hash":"9e12a20544379a73660e659c381f99a669e5276e","modified":1739952973619},{"_id":"public/icons/icon-96x96.png","hash":"c4564a49cd455744dcdd59aedd5745f1972c42f0","modified":1739952973619},{"_id":"public/icons/icon-72x72.png","hash":"ef4946788f89225b863a783c2290d31c98d2a6a8","modified":1739952973619},{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1739952523474},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1739952523474},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1739952523474},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1739952523474},{"_id":"themes/landscape/_config.yml","hash":"ce9d2939245209b8f5c5bbbdadc917d86057d032","modified":1739952523474},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1739952523505},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1739952523490},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1739952523490},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1739952523490},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1739952523490},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1739952523490},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1739952523490},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1739952523490},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1739952523490},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1739952523490},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1739952523490},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1739952523490},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1739952523490},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1739952523490},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1739952523490},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1739952523490},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1739952523490},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1739952523490},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1739952523490},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1739952523490},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1739952523505},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1739952523490},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1739952523490},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1739952523490},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1739952523490},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1739952523490},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1739952523490},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1739952523490},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1739952523490},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1739952523490},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1739952523490},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1739952523490},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1739952523490},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1739952523490},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1739952523490},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1739952523490},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1739952523490},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1739952523505},{"_id":"themes/landscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1739952523505},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1739952523505},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1739952523505},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1739952523505},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1739952523505},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1739952523521},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1739952523521},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1739952523521},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1739952523521},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1739952523521},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1739952523521},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1739952523521},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1739952523490},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1739952523490},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1739952523490},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1739952523490},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1739952523490},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1739952523490},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1739952523505},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1739952523505},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1739952523505},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1739952523505},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1739952523505},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1739952523505},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1739952523505},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1739952523505},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1739952523505},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1739952523505},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1739952523505},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1739952523505},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1739952523505},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1739952523505},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1739952523505},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1739952523521},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1739952523521},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1739952523521},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1739952523521},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1739952523521},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1739952523521},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1739952523505},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1739952523505},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1739952523505},{"_id":"themes/cactus/.gitignore","hash":"044711463cfff978c57dbe9612deeb221269890e","modified":1739953701241},{"_id":"themes/cactus/.jshintrc","hash":"d6ee46102ed2ff00acb555557f47241b701e99a4","modified":1739953701241},{"_id":"themes/cactus/.stylintrc","hash":"8bbbee5eae70fbe7dd53c9ce43d244b47d58385b","modified":1739953701242},{"_id":"themes/cactus/README.md","hash":"78c23f149de6869b91e4e1bb9067915f6520d6fc","modified":1739953701242},{"_id":"themes/cactus/LICENSE","hash":"06806c75801c9ae870a1b47d588ef8e00d3c7c94","modified":1739953701242},{"_id":"themes/cactus/_config.yml","hash":"c57591e0d5d7b82764a9d63d0a2e2906b84919f5","modified":1739953701243},{"_id":"themes/cactus/gulpfile.js","hash":"23b5f0ea4c4d4319dfa8c3d3eaecb7bd70d90336","modified":1739953701243},{"_id":"themes/cactus/package.json","hash":"768e4f07b7bc6406d37b84878e1d34be668f5ea4","modified":1739953701259},{"_id":"themes/cactus/languages/ar.yml","hash":"2f1258875dbffa89d192a1d6481c4bd3c337126b","modified":1739953701243},{"_id":"themes/cactus/languages/ca.yml","hash":"6f9897fe8c7b7bf23be7fa58c530602217aea898","modified":1739953701244},{"_id":"themes/cactus/languages/de.yml","hash":"0734bfc33861585a12327142bf52489c882ad34f","modified":1739953701244},{"_id":"themes/cactus/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1739953701244},{"_id":"themes/cactus/languages/en.yml","hash":"491c87ff300815df52220f6cead8e28edea129df","modified":1739953701245},{"_id":"themes/cactus/languages/es.yml","hash":"56ddfd9081641c45272bdc2df750e41ab8b600bf","modified":1739953701245},{"_id":"themes/cactus/languages/fa.yml","hash":"05fb8dad765af2b9eec32582f5d277eb2735ffc3","modified":1739953701246},{"_id":"themes/cactus/languages/fr.yml","hash":"4604fc8f94d98f6d53c80535fbae78814f88f32d","modified":1739953701246},{"_id":"themes/cactus/languages/it.yml","hash":"501bfc9aed86964ee75354a805378740a02af799","modified":1739953701246},{"_id":"themes/cactus/languages/kr.yml","hash":"ab5be04a1b4c4d87e164b1a045e220f855e85a38","modified":1739953701247},{"_id":"themes/cactus/languages/nl.yml","hash":"4c36921322e782775ccff9aec78d4261153cf5e5","modified":1739953701247},{"_id":"themes/cactus/languages/pl.yml","hash":"3677b782edd98986bb82568c6ff6c8b77140b75a","modified":1739953701247},{"_id":"themes/cactus/languages/pt-br.yml","hash":"417d25e3dae260a2503ec6a8f1b590fa00534b14","modified":1739953701248},{"_id":"themes/cactus/languages/ru.yml","hash":"47fb1672f36d5adadf2f6c3a5c4d1714f5bd563b","modified":1739953701248},{"_id":"themes/cactus/languages/tr.yml","hash":"fcde93b8a92117706b019b51a95385c940e29190","modified":1739953701248},{"_id":"themes/cactus/languages/ua.yml","hash":"983d0acd3ce19858ec14c641da135a562541c778","modified":1739953701249},{"_id":"themes/cactus/languages/vi.yml","hash":"1a1dfc60e952c3429c038f69a9e0ca2057784fca","modified":1739953701249},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"d163690e48de5cf03914d69a99462d72eb040ad3","modified":1739953701249},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"fa5923f53f6174b044255e2d1655136168ff59c0","modified":1739953701250},{"_id":"themes/cactus/layout/404.ejs","hash":"c04829c5ddc417d0b9a66cad55a838cc7eed997b","modified":1739953701250},{"_id":"themes/cactus/layout/archive.ejs","hash":"cda7b4d3f3615a9a591d7610f9e40b615ca68c73","modified":1739953701257},{"_id":"themes/cactus/layout/index.ejs","hash":"6e3a63db6bc43f6e4091361c52df5bcfd5be3339","modified":1739953701258},{"_id":"themes/cactus/layout/layout.ejs","hash":"c7b73f887d62fad9f14507504c4a2c036860e76c","modified":1739953701258},{"_id":"themes/cactus/layout/page.ejs","hash":"1700d4f434170e1eeb0e2a9470fc3c0732b2ba7e","modified":1739953701258},{"_id":"themes/cactus/layout/post.ejs","hash":"9b8e937375f56053f497f437c06d527761b98d1c","modified":1739953701259},{"_id":"themes/cactus/scripts/cdn.js","hash":"6037ad2ddbdc4d87195d91b3bd9f197c1b40467a","modified":1739953701260},{"_id":"themes/cactus/scripts/error_404.js","hash":"099d428e1b96b9c219a789da60b87703c509b2bb","modified":1739953701260},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"98b79403945fa7f8dc177e6da283681677d02567","modified":1739953701260},{"_id":"themes/cactus/scripts/meta.js","hash":"96b1a52af341adc741a5581ddc7335105abe780e","modified":1739953701261},{"_id":"themes/cactus/scripts/page_title.js","hash":"03b5c8b6215f0b305327e8d9b5d49add83b4b95f","modified":1739953701261},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"3d841aa267026703a5cc29f4ffbb613f0a2bbd45","modified":1739953701261},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"162fb8592903605789f516be2cd9c678a1a2d207","modified":1739953701251},{"_id":"themes/cactus/layout/_partial/google_analytics.ejs","hash":"82372a68455c05fa6a07c5ecb8defe11f769da7c","modified":1739953701252},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"cac3ef9de11b14825599efe69b0939f42d368e25","modified":1739953701252},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"2336c1eb473fea860f4c3e309c50bc32544d0b4e","modified":1739953701251},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"ea8692715a8ea49624638dbd7bfb911af58887ee","modified":1739953701252},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"3eae6c39852c3d7cba8978ad93a5570d20580924","modified":1739953701252},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"46ad130a7a741ca44928116479c2004180979e40","modified":1739953701256},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"12dba799ae5736dfbf1548e1923bbb7447de8a6d","modified":1739953701256},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"42fd45758d8f8e814bfdd8b26eb676d87b8465b2","modified":1739953701257},{"_id":"themes/cactus/layout/_partial/umami_analytics.ejs","hash":"5a39772aa121652f9d54619282fe880006b2a677","modified":1739953701257},{"_id":"themes/cactus/source/css/_extend.styl","hash":"1b9b2c69b894343068f3384000581a6092c4e868","modified":1739953701263},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"5c1727836f5d6076a65cf91dbbeaba8d16b5132b","modified":1739953701264},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"37093d2a554283ab652b59e5e0ff9b542edced0f","modified":1739953701291},{"_id":"themes/cactus/source/css/_util.styl","hash":"1c7bed7376f04d7b77d817e132aee08cf65e6395","modified":1739953701296},{"_id":"themes/cactus/source/css/_variables.styl","hash":"5dcbf89bd23d9dd3c45d07049a1448b0ae95426b","modified":1739953701296},{"_id":"themes/cactus/source/css/rtl.styl","hash":"105284f992de848968d818f6200d2ebbdd5342d0","modified":1739953701297},{"_id":"themes/cactus/source/css/style.styl","hash":"210406274d091be115a6175929ba5671b8b8f946","modified":1739953701297},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1739953701298},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1739953701298},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1739953701299},{"_id":"themes/cactus/source/js/main.js","hash":"adc9e8e86e82f6bce527d5674df0a9b298ac71a0","modified":1739953701301},{"_id":"themes/cactus/source/js/search.js","hash":"0d2933fa97c4036805011cc219fcc43ae578e230","modified":1739953701301},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"53d0225501f4c33abda7059293f00aa22e3d4364","modified":1739953701253},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"2170a51e5b2637ef55651f29637cafcd111242b2","modified":1739953701253},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"62fd0bb73eef411ae0b2d6f529a273d54fd0d277","modified":1739953701254},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"b64d37f8a2cdb3990a5f4cd686b4fa3f2607b5bb","modified":1739953701254},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"725ab823c2fb4a5e444eca3afa617d88f305ef71","modified":1739953701254},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"6b037d536ef89c1e7b488f34c20fa977389ae744","modified":1739953701255},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"424029d2d8e6c51c7370c5f8aabc21799418d3f1","modified":1739953701255},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"524ad82e6d52b91d20cded8224efb76f2fdacf0b","modified":1739953701255},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"3d6c91b03ade77daf1ceb11c5dad48b0e35ac353","modified":1739953701262},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"d2978cb0035ba1da0a58db2ed947a72b0bd41042","modified":1739953701262},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"9b156c15c855677a50c4a27de17a8cb377b69802","modified":1739953701263},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"a20de63c1cd7ccf25b8313e2d211866a20e86fbe","modified":1739953701263},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"fc289ba8f47ead6331ec3a51533cfa93251c5634","modified":1739953701264},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"4d67bdab6cc9c614486ca42f98199a04d053e7f0","modified":1739953701265},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"591962bfc758a521b4cb907750c19a1a2423b4d5","modified":1739953701265},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"262167aaebcf28de7f85af7ac77a76fa1fa284f7","modified":1739953701265},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"ca087a3c70998c7ac6b0b42d5cf7a653b8707591","modified":1739953701266},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"7e83c7f2acaaaa98864660afe2794745c36c8e51","modified":1739953701266},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"f47de0b9d66617728f68096ed48371dd6bb9e67a","modified":1739953701266},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"68584ed0e99c7d0e49ef8a2e67cd4dcdad359de4","modified":1739953701267},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"657fe215931fd06e21b56374df699a94890f7ab4","modified":1739953701267},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"1cecd13e0d6b24042ff86372f0596c1441bb834a","modified":1739953701267},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"2b416a0567a53aa0fa8898b196ddd44315c1a5f3","modified":1739953701268},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"a741eba35cdfe2cfd67dfbf109655f253d6b4795","modified":1739953701268},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"f186b357dcebded89b7bcc77389b2cff76533d72","modified":1739953701269},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"8d7c7242974aa2454fa792c5d7a47c5f9632355a","modified":1739953701268},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"c1db353e8613607580d40b12ddc162d029560576","modified":1739953701269},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"802979cea895a0a384645cb30a43de9572cb0e3f","modified":1739953701269},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"8659eaae6a0c2e00b4b9199803e50adf4ff0128d","modified":1739953701270},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"0d51ddc580ccb0a291271fa9632bc91dab632df6","modified":1739953701270},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"96181544eeadc5b0749229f11607e7c01f81e078","modified":1739953701271},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"bbad7a9512b4873294e73ce806e36e43973e6ed8","modified":1739953701271},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"8a5207a0c30262a0bf5e1a41411a306f7a89a7e7","modified":1739953701272},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2f008271299042f2443bca98c9bcadbc8c45e837","modified":1739953701272},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"08e2df313c272d5c70c93e713639663c168180d0","modified":1739953701272},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"18dcb00ab9c62eb810d492047214331c51bb654f","modified":1739953701273},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"add3d88c9d12567dcfae7a8e49984d119fc72227","modified":1739953701273},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"d14846542a26b75fd26df5b5df6c5493733f73f6","modified":1739953701273},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1739953701274},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"1de45e603e2c71c7f6b0c1372a3ba00b1bc153a8","modified":1739953701274},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"9c4905eab730d0b389e6972e907057577f7e25f1","modified":1739953701274},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"98d7884806838a0b46132d759d60ac27c0c4bd9c","modified":1739953701275},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"8965ad6920601c275ca97e617beff5536925a266","modified":1739953701275},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"7bd3389ce16d20488ab336d557056cc703c921c7","modified":1739953701275},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"8da83d66724f2ce508a40f21b4f6dc0d704be562","modified":1739953701276},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"28c59a31467c33bd51cbf3b6085782c2a724ff6c","modified":1739953701276},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"71f4b0fca91a587e6eba15a5306dca963bb8f441","modified":1739953701276},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"a84eb710b302006120c3e7f8ca18f9e6fbc231c3","modified":1739953701277},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"7f5082ae008925a23eb713f160773fe647eb3ff7","modified":1739953701277},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"c83804abe39faebd80f8f4ff64fbd7137674cb1c","modified":1739953701277},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"f66403ce77dcb16b1f98a5061b72f7581630d69f","modified":1739953701278},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"fd796a58c5d4590cda67c998187933788d45f30a","modified":1739953701279},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"dd3c78c42d4a865f11623235e5e5f6829d789706","modified":1739953701279},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"4906456025787de04b48a87c42bb704c5ff67065","modified":1739953701279},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"e284c1760e8da0848f56cd5601d867ceeb0192d7","modified":1739953701280},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"36c44375229613a5bb9ee84a8e90214978070439","modified":1739953701280},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"aa31b30069ebee39e2c3ebb75e2c96ba8678eb14","modified":1739953701280},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"3b998c640eeb2c6192fee24bc78b4137de475dd7","modified":1739953701281},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"e901738455ec9a1bddde7b62bbd8595de6033e1e","modified":1739953701281},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"13113af220dfed09cb49d85102babb352c3eff97","modified":1739953701281},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"ab179306c12a1cf2949482beaca328e379ef034a","modified":1739953701282},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"14fb8678739b77f35771b6d63101ddbf1e7a9fbc","modified":1739953701282},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"84a27bd29d939105d65f4164c219d6cc2e09ae60","modified":1739953701282},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"c3a3bfae1eb864505fbc8748db734600057af1af","modified":1739953701283},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"efba069860181d2b709e1548dd16cf102ca267fa","modified":1739953701283},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"50f1cee8a5b3b165b4184ead0a99dc564b62ef4f","modified":1739953701284},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"e428e8202b01e83b0f018a96058d806e7f4c76bf","modified":1739953701284},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"846a06a57fa0b3db7f83ec7ac2bf34911f32cf66","modified":1739953701284},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1739953701285},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4d4a9360c35f3c5a0c5b9b49a1f2284e7e21317b","modified":1739953701285},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"5dc9ce33cecee87fe9ca8f2ed9342602194484ec","modified":1739953701285},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"95246afef181bd96f9adb1a2e84fb3ef302d4598","modified":1739953701286},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1739953701286},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"186c37e9c39e65aa291cce3317e35904693598d1","modified":1739953701286},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"9fc9400d3a8cae97eb5761c284140acb0f847538","modified":1739953701287},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"bb04944fc06c12ecd7b56ad933dbedde60c2259a","modified":1739953701287},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"e6e4c009b10b9805f0c593446bf013edec47d146","modified":1739953701287},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"92f4423d4964fcfe34ff7ca6cb21012b5738c697","modified":1739953701288},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"e6b025b247e4027fb3c1b7833588f5a5b04a549c","modified":1739953701288},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"eb8441364bb1664ecebde77b965dc36c91133aa0","modified":1739953701289},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"8b16876cf205111d5d5454100de712bc3ea8f477","modified":1739953701289},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"502335f0fac07ed74ca78207bcf3ef8dd2252cf6","modified":1739953701289},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"14fbb0c43af440a290280b26968c8a5c0786b27f","modified":1739953701290},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5fa8999c7f807c1aae29c7a1cdf681678576fb69","modified":1739953701290},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"f63534764dd6598e81177d64714a184f98153b11","modified":1739953701290},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"301bf71b6878c965b3ea49dc19aba3f1c111cd3a","modified":1739953701291},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"abdbf82d71c7ec89c2f3ebaf8cc0606ab4ec1e03","modified":1739953701292},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"92fffe2baacb9d19021b3d120d2038417ca466df","modified":1739953701292},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"6e839bae0ddc11447579c34541e79b50d3670bbd","modified":1739953701292},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"5bc59fd8cadd7cff06d989c9c7e8e4eb0d0872d8","modified":1739953701292},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"f08c8bd685ddced854cdf2183684013c0644527c","modified":1739953701293},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"4a0da5d7052204b23d390a7f76cdc903b9eef52b","modified":1739953701293},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"4ff9755163aae6039bb72eac8360bc1c50fa26b6","modified":1739953701293},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"7a2f9051b21bce525ecb71799d37c4b65a4f9171","modified":1739953701295},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"6cb13a9f4a7c01aa7ab8f73739a7d385377c5465","modified":1739953701296},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"680ea535e5a20c01a31bee4d3eb680b86267a281","modified":1739953701295},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"d62dcb0905e038e69ff24ab9eef9e3306d45535e","modified":1739953701302},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"f6fda2de0348b3e3b7de73267f9f8e97a62f8353","modified":1739953701355},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"7ea4fd7dd4cd4f480af78a0e2c5849eb921b1aeb","modified":1739953701355},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"56e632c9196fac364c66f812a3b4635dd999ad1c","modified":1739953701358},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"6e40d0c7669c1adbcbf034bdc459f7bed4d6676d","modified":1739953701359},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"1c3dbf17411b1f6a6b22c2b76e9d8511586643d0","modified":1739953701362},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"50b654d916204c30987d1987abd890ef92085ae3","modified":1739953701362},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"43a8aaa3fca8721dd32a5d20f7a98dfbc87c97fd","modified":1739953701362},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"14b3e257c51a6a11d23b2a078017ff340c9777e4","modified":1739953701362},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff","hash":"235889d59ddad2b1f3243ccaab7733bd713a2a21","modified":1739953701362},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff2","hash":"a9714ffb842afc74836e64de04b52d8c37c87c8a","modified":1739953701362},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"c0e784de2eb5261cca244928f8a81fd893c3fe16","modified":1739953701362},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"9b03b1a9071709f5b7dbca13412ecef6cb7a2a67","modified":1739953701362},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff","hash":"2e8e6d38d361def5f48baac366f04e3db3ed4828","modified":1739953701362},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff2","hash":"e213bb26bc7f10e1df3fe2d03d3ecaecd6e6d371","modified":1739953701362},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"a3dca7ea2f1fedafc2dfb687884d8ac792d15947","modified":1739953701362},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"c25ccdd505ca1b7c74a7fb2365ad2c262f8025ba","modified":1739953701294},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"b06410ed34b5ecbcac11357aa359149e1f827aa6","modified":1739953701295},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"fb363d27cfdfe71a243fa2ac3dab2815232b9b7e","modified":1739953701307},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"67afa6237670ab99125056f2899129f22912dcf3","modified":1739953701307},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.ttf","hash":"a9d072aca9e0fadc2a7167671ce3d6b18d9cd2cc","modified":1739953701312},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.woff2","hash":"8f80d0bbe995f7fe92320fdaec10cd5ccd710a51","modified":1739953701312},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"4a8d364c99df8471c6a0c7192710631e605af635","modified":1739953701313},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"8d7e041394387fd523991bf827d417ade2747e35","modified":1739953701314},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"edf8a6a066f201b1ffad32c585bd79c9982d4433","modified":1739953701313},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"91152bd73e7ff8d943e3bde3ddb0fa0a018e1c21","modified":1739953701353},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"b65915e3fa57b5c19995d15dc2341d115c1971b9","modified":1739953701354},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"5c1c680fade45393e4a5bb4548a092cd5ea6811e","modified":1739953701356},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"122bb778b17a152c426a825ee981610a4bd59bf3","modified":1739953701358},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"a059359e9bea17dc2ff2ede955a05bf0dc4d00d0","modified":1739953701360},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"df82b80c4d3b11e70dcd269fc62ac97cbfa0414d","modified":1739953701361},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"d9ec1f9f3fefd57e446cbe86dc297f1ff269b6de","modified":1739953701362},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"948a091f0fdb8c7ae17d5ef8e51bd8830d65dd9a","modified":1739953701362},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.eot","hash":"521c01f0eb79a48025e972ecbe21b0d7fb15437b","modified":1739953701362},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.ttf","hash":"643c28c8f8a2bce1a0d62525aa045cd9883773cd","modified":1739953701362},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"a0ea0bdaef00b35544f9a21d25d35db9a79f7189","modified":1739953701362},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"6aacb0eecb03c660570b6e159ba5ca97ca7461cf","modified":1739953701362},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.eot","hash":"af46f7f4e10a1440a4c97b350622d279143e6798","modified":1739953701362},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.ttf","hash":"1e08b6373c2e086f24776df9b11e4be6bbcc8a4a","modified":1739953701362},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"2bf056f1697bf3afdf49e56573d63b114374661e","modified":1739953701303},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"4350f9ba93384634faf35f41c503c99c767f1069","modified":1739953701306},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f0982a77285d53653845b0a78170b4688db972f1","modified":1739953701305},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"6b99aa650bd12a36caa14e0127435d8f4cd3ba73","modified":1739953701311},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1739953701300},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"20bd663830188cbadd2264e1daf9497c3ffc3621","modified":1739953701310},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1739953701327},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1739953701341},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1739953701349},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1739953701319},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1739953701323},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1739953701331},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1739953701333},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1739953701337},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1739953701343},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1739953701345},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1739953701347},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1739953701351},{"_id":"source/_posts/leetcode-word-break.md","hash":"bf28d7d9a816fefb61ce8e8107c5457cb95d3057","modified":1739956746236},{"_id":"source/_posts/leetcode-word-break-2.md","hash":"d7f05d5b2464df4a0e9553307e97fad3b1eba97e","modified":1739956754856},{"_id":"source/_posts/ac-machine.md","hash":"7462ba672beb59c2b2e2eff00820eb03129e3641","modified":1739956784026},{"_id":"public/2024/06/05/ac-machine/index.html","hash":"180dde016805aac087929eef3e35a9316e0f026f","modified":1739956858417},{"_id":"public/2024/03/20/leetcode-word-break-2/index.html","hash":"ef455bb7d650ce9f764468d36a5b473a086467b3","modified":1739956858417},{"_id":"public/2024/03/19/leetcode-word-break/index.html","hash":"adc175bd56e5df40347da99bf82189e7cdd2acee","modified":1739956858417},{"_id":"public/2022/06/12/hello-world/index.html","hash":"2da1f7f44ec32c4055db2746dae83cee63b97365","modified":1739956858417},{"_id":"public/archives/2022/index.html","hash":"cc7b5a61748a19cf5935df801cf71de5e241a050","modified":1739956858417},{"_id":"public/archives/2024/index.html","hash":"987a8e034da1ddb42c88572a8057e1a0d3d1e65c","modified":1739956858417},{"_id":"public/archives/2022/06/index.html","hash":"14ed6ca6cd4fb124dbcd695e5ab8ac9a60cb5c5f","modified":1739956858417},{"_id":"public/archives/2024/03/index.html","hash":"22f4581d1203800848a32efb61dfb3e8ab19cd93","modified":1739956858417},{"_id":"public/archives/2024/06/index.html","hash":"06bf725e5520484879106b53ebe23f78e8155516","modified":1739956858417},{"_id":"public/tags/leetcode/index.html","hash":"75fb9213f4366f7e32d5ef6658de7eb044245c23","modified":1739956858417},{"_id":"public/404.html","hash":"ed79a2e3a51a413adc890fd3bcc1199e4f140508","modified":1739956858417},{"_id":"public/tags/算法/index.html","hash":"53caf30fe85aa5003e076967f9e6b308e45fc313","modified":1739956858417},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1739956858417},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1739956858417},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1739956858417},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1739956858417},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1739956858417},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1739956858417},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1739956858417},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1739956858417},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1739956858417},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1739956858417},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1739956858417},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1739956858417},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"f6fda2de0348b3e3b7de73267f9f8e97a62f8353","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"7ea4fd7dd4cd4f480af78a0e2c5849eb921b1aeb","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"56e632c9196fac364c66f812a3b4635dd999ad1c","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"6e40d0c7669c1adbcbf034bdc459f7bed4d6676d","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"1c3dbf17411b1f6a6b22c2b76e9d8511586643d0","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"50b654d916204c30987d1987abd890ef92085ae3","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"43a8aaa3fca8721dd32a5d20f7a98dfbc87c97fd","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"14b3e257c51a6a11d23b2a078017ff340c9777e4","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Regular.woff","hash":"235889d59ddad2b1f3243ccaab7733bd713a2a21","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Regular.woff2","hash":"a9714ffb842afc74836e64de04b52d8c37c87c8a","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"c0e784de2eb5261cca244928f8a81fd893c3fe16","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"9b03b1a9071709f5b7dbca13412ecef6cb7a2a67","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Variable.woff","hash":"2e8e6d38d361def5f48baac366f04e3db3ed4828","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Variable.woff2","hash":"e213bb26bc7f10e1df3fe2d03d3ecaecd6e6d371","modified":1739956858417},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"fb363d27cfdfe71a243fa2ac3dab2815232b9b7e","modified":1739956858417},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"67afa6237670ab99125056f2899129f22912dcf3","modified":1739956858417},{"_id":"public/lib/font-awesome/webfonts/fa-v4compatibility.ttf","hash":"a9d072aca9e0fadc2a7167671ce3d6b18d9cd2cc","modified":1739956858417},{"_id":"public/lib/font-awesome/webfonts/fa-v4compatibility.woff2","hash":"8f80d0bbe995f7fe92320fdaec10cd5ccd710a51","modified":1739956858417},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"91152bd73e7ff8d943e3bde3ddb0fa0a018e1c21","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"b65915e3fa57b5c19995d15dc2341d115c1971b9","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"5c1c680fade45393e4a5bb4548a092cd5ea6811e","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"122bb778b17a152c426a825ee981610a4bd59bf3","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"a059359e9bea17dc2ff2ede955a05bf0dc4d00d0","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"df82b80c4d3b11e70dcd269fc62ac97cbfa0414d","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"d9ec1f9f3fefd57e446cbe86dc297f1ff269b6de","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"948a091f0fdb8c7ae17d5ef8e51bd8830d65dd9a","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Regular.ttf","hash":"643c28c8f8a2bce1a0d62525aa045cd9883773cd","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Regular.eot","hash":"521c01f0eb79a48025e972ecbe21b0d7fb15437b","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"a0ea0bdaef00b35544f9a21d25d35db9a79f7189","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"6aacb0eecb03c660570b6e159ba5ca97ca7461cf","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Variable.eot","hash":"af46f7f4e10a1440a4c97b350622d279143e6798","modified":1739956858417},{"_id":"public/lib/vazir-font/Vazir-Variable.ttf","hash":"1e08b6373c2e086f24776df9b11e4be6bbcc8a4a","modified":1739956858417},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"4350f9ba93384634faf35f41c503c99c767f1069","modified":1739956858417},{"_id":"public/css/style.css","hash":"102142affab6470b7d143a07a89c479945eac37b","modified":1739956858417},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1739956858417},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1739956858417},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1739956858417},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1739956858417},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1739956858417},{"_id":"public/css/rtl.css","hash":"9589fac02a34fd9084f805f801889028756bbb65","modified":1739956858417},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1739956858417},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1739956858417},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1739956858417},{"_id":"public/js/main.js","hash":"619ac6529d140711e3b14f739a192bb31c4824ff","modified":1739956858417},{"_id":"public/lib/clipboard/clipboard.min.js","hash":"9a7cb405f9beed005891587d41f76a0720893ffc","modified":1739956858417},{"_id":"public/js/search.js","hash":"914a2ce72fb325106c61600200be823b72bfb39f","modified":1739956858417},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1739956858417},{"_id":"public/lib/vazir-font/font-face.css","hash":"ba0030e1cd28a8caa7a5bb74b98da7c7bb185c90","modified":1739956858417},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"dd3052149d3054f35efb823c68dd78e78aad5875","modified":1739956858417},{"_id":"public/lib/jquery/jquery.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1739956858417},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1739956858417},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"8c06d82739d14b094ff6d9036021a252bd1d985d","modified":1739956858417},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f0982a77285d53653845b0a78170b4688db972f1","modified":1739956858417},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"6b99aa650bd12a36caa14e0127435d8f4cd3ba73","modified":1739956858417},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1739956858417},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1739956858417},{"_id":"public/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1739956858417},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"20bd663830188cbadd2264e1daf9497c3ffc3621","modified":1739956858417},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1739956858417},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1739956858417},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1739956858417},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1739956858417},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1739956858417},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1739956858417},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1739956858417},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1739956858417},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1739956858417},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1739956858417},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1739956858417},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1739956858417}],"Category":[],"Data":[],"Page":[{"layout":"about","title":"about","date":"2019-08-17T01:52:33.000Z","_content":"","source":"about/index.md","raw":"---\nlayout: about\ntitle: about\ndate: 2019-08-17 09:52:33\n---\n","updated":"2025-02-19T08:08:43.474Z","path":"about/index.html","comments":1,"_id":"cm7bn0tjn0000m4a7cf3c89qx","content":"","excerpt":"","more":""},{"layout":"tags","title":"tags","date":"2022-08-17T01:52:33.000Z","_content":"","source":"tags/index.md","raw":"---\nlayout: tags\ntitle: tags\ndate: 2022-08-17 09:52:33\n---","updated":"2025-02-19T08:41:14.504Z","path":"tags/index.html","_id":"cm7bn0tjq0001m4a72m9g8elk","comments":1,"content":"","excerpt":"","more":""},{"layout":"categories","title":"categories","date":"2019-08-17T01:52:33.000Z","_content":"","source":"categories/index.md","raw":"---\nlayout: categories\ntitle: categories\ndate: 2019-08-17 09:52:33\n---","updated":"2025-02-19T08:08:43.474Z","path":"categories/index.html","comments":1,"_id":"cm7bn0tjt0003m4a7ht9b4pvw","content":"","excerpt":"","more":""},{"layout":"projects","title":"projects","date":"2019-08-17T01:52:33.000Z","_content":"","source":"projects/index.md","raw":"---\nlayout: projects\ntitle: projects\ndate: 2019-08-17 09:52:33\n---","updated":"2025-02-19T08:08:43.474Z","path":"projects/index.html","comments":1,"_id":"cm7bn0tju0005m4a7bgh25beq","content":"","excerpt":"","more":""}],"Post":[{"title":"Hello World","date":"2022-06-12T07:54:03.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags: test\ndate: 2022-06-12 15:54:03\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2025-02-19T08:38:55.264Z","_id":"cm7bn0tjq0002m4a7e5ge21sm","comments":1,"layout":"post","photos":[],"content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"leetcode139实践","date":"2024-03-19T09:51:41.000Z","_content":"## 题目描述\n\n给定一个非空字符串 `s` 和一个包含非空单词列表的字典 `wordDict`，判断 `s` 是否可以被拆分为一个或多个字典中的单词。\n\n**示例 1:**\n\n输入: s = \"leetcode\", wordDict = [\"leet\", \"code\"]\n输出: true\n解释: \"leetcode\" 可以被拆分为 \"leet\" 和 \"code\"。\n\n**示例 2:**\n\n输入: s = \"applepenapple\", wordDict = [\"apple\", \"pen\"]\n输出: true\n解释: \"applepenapple\" 可以被拆分为 \"apple\"、\"pen\" 和 \"apple\"。\n\n**示例 3:**\n\n输入: s = \"catsandog\", wordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]\n输出: false\n解释: \"catsandog\" 无法被拆分为字典中的单词。\n\n## 解题思路\n\n这道题可以使用动态规划来解决。我们可以定义一个布尔数组 `dp`，其中 `dp[i]` 表示字符串 `s` 的前 `i` 个字符是否可以被拆分为字典中的单词。\n\n### 动态规划步骤\n\n1. **初始化**：`dp[0] = True`，表示空字符串可以被拆分。\n2. **状态转移**：对于每个位置 `i`，我们遍历所有可能的前缀 `s[j:i]`，如果 `dp[j]` 为 `True` 且 `s[j:i]` 在字典中，那么 `dp[i]` 也为 `True`。\n3. **最终结果**：`dp[len(s)]` 即为所求。\n\n### 代码实现\n\n```python\n\ndef wordBreak(s, wordDict):\n    word_set = set(wordDict)\n    dp = [False] * (len(s) + 1)\n    dp[0] = True\n    \n    for i in range(1, len(s) + 1):\n        for j in range(i):\n            if dp[j] and s[j:i] in word_set:\n                dp[i] = True\n                break\n    \n    return dp[len(s)]\n\t\n```\n\n### 代码解释\n\n1. word_set = set(wordDict)：将字典转换为集合，方便快速查找。\n2. dp = [False] * (len(s) + 1)：初始化 dp 数组，长度为 len(s) + 1，初始值为 False。\n3. dp[0] = True：空字符串可以被拆分。\n4. 双重循环：外层循环遍历字符串的每个位置 i，内层循环遍历所有可能的前缀 s[j:i]。\n5. if dp[j] and s[j:i] in word_set：如果 dp[j] 为 True 且 s[j:i] 在字典中，那么 dp[i] 也为 True。\nreturn dp[len(s)]：返回最终结果。","source":"_posts/leetcode-word-break.md","raw":"---\ntitle: leetcode139实践\ndate: 2024-03-19 17:51:41\ntags: leetcode\n---\n## 题目描述\n\n给定一个非空字符串 `s` 和一个包含非空单词列表的字典 `wordDict`，判断 `s` 是否可以被拆分为一个或多个字典中的单词。\n\n**示例 1:**\n\n输入: s = \"leetcode\", wordDict = [\"leet\", \"code\"]\n输出: true\n解释: \"leetcode\" 可以被拆分为 \"leet\" 和 \"code\"。\n\n**示例 2:**\n\n输入: s = \"applepenapple\", wordDict = [\"apple\", \"pen\"]\n输出: true\n解释: \"applepenapple\" 可以被拆分为 \"apple\"、\"pen\" 和 \"apple\"。\n\n**示例 3:**\n\n输入: s = \"catsandog\", wordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]\n输出: false\n解释: \"catsandog\" 无法被拆分为字典中的单词。\n\n## 解题思路\n\n这道题可以使用动态规划来解决。我们可以定义一个布尔数组 `dp`，其中 `dp[i]` 表示字符串 `s` 的前 `i` 个字符是否可以被拆分为字典中的单词。\n\n### 动态规划步骤\n\n1. **初始化**：`dp[0] = True`，表示空字符串可以被拆分。\n2. **状态转移**：对于每个位置 `i`，我们遍历所有可能的前缀 `s[j:i]`，如果 `dp[j]` 为 `True` 且 `s[j:i]` 在字典中，那么 `dp[i]` 也为 `True`。\n3. **最终结果**：`dp[len(s)]` 即为所求。\n\n### 代码实现\n\n```python\n\ndef wordBreak(s, wordDict):\n    word_set = set(wordDict)\n    dp = [False] * (len(s) + 1)\n    dp[0] = True\n    \n    for i in range(1, len(s) + 1):\n        for j in range(i):\n            if dp[j] and s[j:i] in word_set:\n                dp[i] = True\n                break\n    \n    return dp[len(s)]\n\t\n```\n\n### 代码解释\n\n1. word_set = set(wordDict)：将字典转换为集合，方便快速查找。\n2. dp = [False] * (len(s) + 1)：初始化 dp 数组，长度为 len(s) + 1，初始值为 False。\n3. dp[0] = True：空字符串可以被拆分。\n4. 双重循环：外层循环遍历字符串的每个位置 i，内层循环遍历所有可能的前缀 s[j:i]。\n5. if dp[j] and s[j:i] in word_set：如果 dp[j] 为 True 且 s[j:i] 在字典中，那么 dp[i] 也为 True。\nreturn dp[len(s)]：返回最终结果。","slug":"leetcode-word-break","published":1,"updated":"2025-02-19T09:19:06.236Z","_id":"cm7bo4yk70000c4a7fsnh1yue","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个非空字符串 <code>s</code> 和一个包含非空单词列表的字典 <code>wordDict</code>，判断 <code>s</code> 是否可以被拆分为一个或多个字典中的单词。</p>\n<p><strong>示例 1:</strong></p>\n<p>输入: s &#x3D; “leetcode”, wordDict &#x3D; [“leet”, “code”]<br>输出: true<br>解释: “leetcode” 可以被拆分为 “leet” 和 “code”。</p>\n<p><strong>示例 2:</strong></p>\n<p>输入: s &#x3D; “applepenapple”, wordDict &#x3D; [“apple”, “pen”]<br>输出: true<br>解释: “applepenapple” 可以被拆分为 “apple”、”pen” 和 “apple”。</p>\n<p><strong>示例 3:</strong></p>\n<p>输入: s &#x3D; “catsandog”, wordDict &#x3D; [“cats”, “dog”, “sand”, “and”, “cat”]<br>输出: false<br>解释: “catsandog” 无法被拆分为字典中的单词。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这道题可以使用动态规划来解决。我们可以定义一个布尔数组 <code>dp</code>，其中 <code>dp[i]</code> 表示字符串 <code>s</code> 的前 <code>i</code> 个字符是否可以被拆分为字典中的单词。</p>\n<h3 id=\"动态规划步骤\"><a href=\"#动态规划步骤\" class=\"headerlink\" title=\"动态规划步骤\"></a>动态规划步骤</h3><ol>\n<li><strong>初始化</strong>：<code>dp[0] = True</code>，表示空字符串可以被拆分。</li>\n<li><strong>状态转移</strong>：对于每个位置 <code>i</code>，我们遍历所有可能的前缀 <code>s[j:i]</code>，如果 <code>dp[j]</code> 为 <code>True</code> 且 <code>s[j:i]</code> 在字典中，那么 <code>dp[i]</code> 也为 <code>True</code>。</li>\n<li><strong>最终结果</strong>：<code>dp[len(s)]</code> 即为所求。</li>\n</ol>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">wordBreak</span>(<span class=\"params\">s, wordDict</span>):</span><br><span class=\"line\">    word_set = <span class=\"built_in\">set</span>(wordDict)</span><br><span class=\"line\">    dp = [<span class=\"literal\">False</span>] * (<span class=\"built_in\">len</span>(s) + <span class=\"number\">1</span>)</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"literal\">True</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(s) + <span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> dp[j] <span class=\"keyword\">and</span> s[j:i] <span class=\"keyword\">in</span> word_set:</span><br><span class=\"line\">                dp[i] = <span class=\"literal\">True</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[<span class=\"built_in\">len</span>(s)]</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h3><ol>\n<li>word_set &#x3D; set(wordDict)：将字典转换为集合，方便快速查找。</li>\n<li>dp &#x3D; [False] * (len(s) + 1)：初始化 dp 数组，长度为 len(s) + 1，初始值为 False。</li>\n<li>dp[0] &#x3D; True：空字符串可以被拆分。</li>\n<li>双重循环：外层循环遍历字符串的每个位置 i，内层循环遍历所有可能的前缀 s[j:i]。</li>\n<li>if dp[j] and s[j:i] in word_set：如果 dp[j] 为 True 且 s[j:i] 在字典中，那么 dp[i] 也为 True。<br>return dp[len(s)]：返回最终结果。</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个非空字符串 <code>s</code> 和一个包含非空单词列表的字典 <code>wordDict</code>，判断 <code>s</code> 是否可以被拆分为一个或多个字典中的单词。</p>\n<p><strong>示例 1:</strong></p>\n<p>输入: s &#x3D; “leetcode”, wordDict &#x3D; [“leet”, “code”]<br>输出: true<br>解释: “leetcode” 可以被拆分为 “leet” 和 “code”。</p>\n<p><strong>示例 2:</strong></p>\n<p>输入: s &#x3D; “applepenapple”, wordDict &#x3D; [“apple”, “pen”]<br>输出: true<br>解释: “applepenapple” 可以被拆分为 “apple”、”pen” 和 “apple”。</p>\n<p><strong>示例 3:</strong></p>\n<p>输入: s &#x3D; “catsandog”, wordDict &#x3D; [“cats”, “dog”, “sand”, “and”, “cat”]<br>输出: false<br>解释: “catsandog” 无法被拆分为字典中的单词。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这道题可以使用动态规划来解决。我们可以定义一个布尔数组 <code>dp</code>，其中 <code>dp[i]</code> 表示字符串 <code>s</code> 的前 <code>i</code> 个字符是否可以被拆分为字典中的单词。</p>\n<h3 id=\"动态规划步骤\"><a href=\"#动态规划步骤\" class=\"headerlink\" title=\"动态规划步骤\"></a>动态规划步骤</h3><ol>\n<li><strong>初始化</strong>：<code>dp[0] = True</code>，表示空字符串可以被拆分。</li>\n<li><strong>状态转移</strong>：对于每个位置 <code>i</code>，我们遍历所有可能的前缀 <code>s[j:i]</code>，如果 <code>dp[j]</code> 为 <code>True</code> 且 <code>s[j:i]</code> 在字典中，那么 <code>dp[i]</code> 也为 <code>True</code>。</li>\n<li><strong>最终结果</strong>：<code>dp[len(s)]</code> 即为所求。</li>\n</ol>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">wordBreak</span>(<span class=\"params\">s, wordDict</span>):</span><br><span class=\"line\">    word_set = <span class=\"built_in\">set</span>(wordDict)</span><br><span class=\"line\">    dp = [<span class=\"literal\">False</span>] * (<span class=\"built_in\">len</span>(s) + <span class=\"number\">1</span>)</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"literal\">True</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(s) + <span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> dp[j] <span class=\"keyword\">and</span> s[j:i] <span class=\"keyword\">in</span> word_set:</span><br><span class=\"line\">                dp[i] = <span class=\"literal\">True</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[<span class=\"built_in\">len</span>(s)]</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h3><ol>\n<li>word_set &#x3D; set(wordDict)：将字典转换为集合，方便快速查找。</li>\n<li>dp &#x3D; [False] * (len(s) + 1)：初始化 dp 数组，长度为 len(s) + 1，初始值为 False。</li>\n<li>dp[0] &#x3D; True：空字符串可以被拆分。</li>\n<li>双重循环：外层循环遍历字符串的每个位置 i，内层循环遍历所有可能的前缀 s[j:i]。</li>\n<li>if dp[j] and s[j:i] in word_set：如果 dp[j] 为 True 且 s[j:i] 在字典中，那么 dp[i] 也为 True。<br>return dp[len(s)]：返回最终结果。</li>\n</ol>\n"},{"title":"leetcode140实践","date":"2024-03-20T09:05:40.000Z","_content":"# LeetCode 140. 单词拆分 II\n\nLeetCode 140. 单词拆分 II 是一道经典的动态规划与回溯结合的题目。题目要求给定一个非空字符串 `s` 和一个包含非空单词列表的字典 `wordDict`，要求将字符串 `s` 拆分成由字典中的单词组成的句子，并返回所有可能的句子。\n\n## 示例\n\n**输入:**\ns = \"catsanddog\"\n\nwordDict = [\"cat\", \"cats\", \"and\", \"sand\", \"dog\"]\n\n\n**输出:**\n[\n\n\"cats and dog\",\n\n\"cat sand dog\"\n\n]\n\n\n## 解题思路\n\n这道题可以分解为两个部分：\n\n1. 判断字符串是否可以拆分成字典中的单词：这一步可以通过动态规划来解决。\n2. 生成所有可能的拆分方式：这一步可以通过回溯算法来解决。\n\n### 1. 动态规划判断是否可以拆分\n\n我们可以使用动态规划来判断字符串 `s` 是否可以拆分成字典中的单词。定义一个布尔数组 `dp`，其中 `dp[i]` 表示字符串 `s` 的前 `i` 个字符是否可以拆分成字典中的单词。\n\n- 初始化 `dp[0] = True`，表示空字符串可以被拆分。\n- 对于每个位置 `i`，遍历所有可能的 `j`（`0 <= j < i`），如果 `dp[j]` 为 `True` 且 `s[j:i]` 在字典中，则 `dp[i] = True`。\n\n### 2. 回溯生成所有可能的拆分方式\n\n在确定了字符串可以被拆分之后，我们可以使用回溯算法来生成所有可能的拆分方式。具体步骤如下：\n\n- 从字符串的起始位置开始，尝试所有可能的拆分点。\n- 如果当前子串在字典中，则递归处理剩余部分。\n- 当处理到字符串末尾时，将当前的拆分方式加入结果集。\n\n## 代码实现\n\n```python\nfrom typing import List\n\nclass Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        # 将字典转换为集合，方便快速查找\n        wordSet = set(wordDict)\n        n = len(s)\n        \n        # 动态规划判断是否可以拆分\n        dp = [False] * (n + 1)\n        dp[0] = True\n        \n        for i in range(1, n + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordSet:\n                    dp[i] = True\n                    break\n        \n        # 如果无法拆分，直接返回空列表\n        if not dp[n]:\n            return []\n        \n        # 回溯生成所有可能的拆分方式\n        result = []\n        self.backtrack(s, wordSet, 0, [], result)\n        return result\n    \n    def backtrack(self, s, wordSet, start, path, result):\n        if start == len(s):\n            result.append(\" \".join(path))\n            return\n        \n        for end in range(start + 1, len(s) + 1):\n            word = s[start:end]\n            if word in wordSet:\n                self.backtrack(s, wordSet, end, path + [word], result)\n```\n\n## 代码解释\n### 动态规划部分：\n\n1. 我们首先将 wordDict 转换为集合 wordSet，以便快速查找。\n2. 然后我们初始化 dp 数组，dp[0] 为 True，表示空字符串可以被拆分。\n3. 对于每个位置 i，我们遍历所有可能的 j，如果 dp[j] 为 True 且 s[j:i] 在 wordSet 中，则 dp[i] 为 True。\n\n### 回溯部分：\n\n1. 我们从字符串的起始位置开始，尝试所有可能的拆分点。\n2. 如果当前子串在 wordSet 中，则递归处理剩余部分。\n3. 当处理到字符串末尾时，将当前的拆分方式加入结果集。","source":"_posts/leetcode-word-break-2.md","raw":"---\ntitle: leetcode140实践\ndate: 2024-03-20 17:05:40\ntags:  leetcode\n---\n# LeetCode 140. 单词拆分 II\n\nLeetCode 140. 单词拆分 II 是一道经典的动态规划与回溯结合的题目。题目要求给定一个非空字符串 `s` 和一个包含非空单词列表的字典 `wordDict`，要求将字符串 `s` 拆分成由字典中的单词组成的句子，并返回所有可能的句子。\n\n## 示例\n\n**输入:**\ns = \"catsanddog\"\n\nwordDict = [\"cat\", \"cats\", \"and\", \"sand\", \"dog\"]\n\n\n**输出:**\n[\n\n\"cats and dog\",\n\n\"cat sand dog\"\n\n]\n\n\n## 解题思路\n\n这道题可以分解为两个部分：\n\n1. 判断字符串是否可以拆分成字典中的单词：这一步可以通过动态规划来解决。\n2. 生成所有可能的拆分方式：这一步可以通过回溯算法来解决。\n\n### 1. 动态规划判断是否可以拆分\n\n我们可以使用动态规划来判断字符串 `s` 是否可以拆分成字典中的单词。定义一个布尔数组 `dp`，其中 `dp[i]` 表示字符串 `s` 的前 `i` 个字符是否可以拆分成字典中的单词。\n\n- 初始化 `dp[0] = True`，表示空字符串可以被拆分。\n- 对于每个位置 `i`，遍历所有可能的 `j`（`0 <= j < i`），如果 `dp[j]` 为 `True` 且 `s[j:i]` 在字典中，则 `dp[i] = True`。\n\n### 2. 回溯生成所有可能的拆分方式\n\n在确定了字符串可以被拆分之后，我们可以使用回溯算法来生成所有可能的拆分方式。具体步骤如下：\n\n- 从字符串的起始位置开始，尝试所有可能的拆分点。\n- 如果当前子串在字典中，则递归处理剩余部分。\n- 当处理到字符串末尾时，将当前的拆分方式加入结果集。\n\n## 代码实现\n\n```python\nfrom typing import List\n\nclass Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        # 将字典转换为集合，方便快速查找\n        wordSet = set(wordDict)\n        n = len(s)\n        \n        # 动态规划判断是否可以拆分\n        dp = [False] * (n + 1)\n        dp[0] = True\n        \n        for i in range(1, n + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordSet:\n                    dp[i] = True\n                    break\n        \n        # 如果无法拆分，直接返回空列表\n        if not dp[n]:\n            return []\n        \n        # 回溯生成所有可能的拆分方式\n        result = []\n        self.backtrack(s, wordSet, 0, [], result)\n        return result\n    \n    def backtrack(self, s, wordSet, start, path, result):\n        if start == len(s):\n            result.append(\" \".join(path))\n            return\n        \n        for end in range(start + 1, len(s) + 1):\n            word = s[start:end]\n            if word in wordSet:\n                self.backtrack(s, wordSet, end, path + [word], result)\n```\n\n## 代码解释\n### 动态规划部分：\n\n1. 我们首先将 wordDict 转换为集合 wordSet，以便快速查找。\n2. 然后我们初始化 dp 数组，dp[0] 为 True，表示空字符串可以被拆分。\n3. 对于每个位置 i，我们遍历所有可能的 j，如果 dp[j] 为 True 且 s[j:i] 在 wordSet 中，则 dp[i] 为 True。\n\n### 回溯部分：\n\n1. 我们从字符串的起始位置开始，尝试所有可能的拆分点。\n2. 如果当前子串在 wordSet 中，则递归处理剩余部分。\n3. 当处理到字符串末尾时，将当前的拆分方式加入结果集。","slug":"leetcode-word-break-2","published":1,"updated":"2025-02-19T09:19:14.856Z","_id":"cm7boue7t0000pwa7ff7th9q1","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"LeetCode-140-单词拆分-II\"><a href=\"#LeetCode-140-单词拆分-II\" class=\"headerlink\" title=\"LeetCode 140. 单词拆分 II\"></a>LeetCode 140. 单词拆分 II</h1><p>LeetCode 140. 单词拆分 II 是一道经典的动态规划与回溯结合的题目。题目要求给定一个非空字符串 <code>s</code> 和一个包含非空单词列表的字典 <code>wordDict</code>，要求将字符串 <code>s</code> 拆分成由字典中的单词组成的句子，并返回所有可能的句子。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p><strong>输入:</strong><br>s &#x3D; “catsanddog”</p>\n<p>wordDict &#x3D; [“cat”, “cats”, “and”, “sand”, “dog”]</p>\n<p><strong>输出:</strong><br>[</p>\n<p>“cats and dog”,</p>\n<p>“cat sand dog”</p>\n<p>]</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这道题可以分解为两个部分：</p>\n<ol>\n<li>判断字符串是否可以拆分成字典中的单词：这一步可以通过动态规划来解决。</li>\n<li>生成所有可能的拆分方式：这一步可以通过回溯算法来解决。</li>\n</ol>\n<h3 id=\"1-动态规划判断是否可以拆分\"><a href=\"#1-动态规划判断是否可以拆分\" class=\"headerlink\" title=\"1. 动态规划判断是否可以拆分\"></a>1. 动态规划判断是否可以拆分</h3><p>我们可以使用动态规划来判断字符串 <code>s</code> 是否可以拆分成字典中的单词。定义一个布尔数组 <code>dp</code>，其中 <code>dp[i]</code> 表示字符串 <code>s</code> 的前 <code>i</code> 个字符是否可以拆分成字典中的单词。</p>\n<ul>\n<li>初始化 <code>dp[0] = True</code>，表示空字符串可以被拆分。</li>\n<li>对于每个位置 <code>i</code>，遍历所有可能的 <code>j</code>（<code>0 &lt;= j &lt; i</code>），如果 <code>dp[j]</code> 为 <code>True</code> 且 <code>s[j:i]</code> 在字典中，则 <code>dp[i] = True</code>。</li>\n</ul>\n<h3 id=\"2-回溯生成所有可能的拆分方式\"><a href=\"#2-回溯生成所有可能的拆分方式\" class=\"headerlink\" title=\"2. 回溯生成所有可能的拆分方式\"></a>2. 回溯生成所有可能的拆分方式</h3><p>在确定了字符串可以被拆分之后，我们可以使用回溯算法来生成所有可能的拆分方式。具体步骤如下：</p>\n<ul>\n<li>从字符串的起始位置开始，尝试所有可能的拆分点。</li>\n<li>如果当前子串在字典中，则递归处理剩余部分。</li>\n<li>当处理到字符串末尾时，将当前的拆分方式加入结果集。</li>\n</ul>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">wordBreak</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span>, wordDict: <span class=\"type\">List</span>[<span class=\"built_in\">str</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">str</span>]:</span><br><span class=\"line\">        <span class=\"comment\"># 将字典转换为集合，方便快速查找</span></span><br><span class=\"line\">        wordSet = <span class=\"built_in\">set</span>(wordDict)</span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 动态规划判断是否可以拆分</span></span><br><span class=\"line\">        dp = [<span class=\"literal\">False</span>] * (n + <span class=\"number\">1</span>)</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"literal\">True</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n + <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> dp[j] <span class=\"keyword\">and</span> s[j:i] <span class=\"keyword\">in</span> wordSet:</span><br><span class=\"line\">                    dp[i] = <span class=\"literal\">True</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 如果无法拆分，直接返回空列表</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> dp[n]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 回溯生成所有可能的拆分方式</span></span><br><span class=\"line\">        result = []</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.backtrack(s, wordSet, <span class=\"number\">0</span>, [], result)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">backtrack</span>(<span class=\"params\">self, s, wordSet, start, path, result</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> start == <span class=\"built_in\">len</span>(s):</span><br><span class=\"line\">            result.append(<span class=\"string\">&quot; &quot;</span>.join(path))</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> end <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(start + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(s) + <span class=\"number\">1</span>):</span><br><span class=\"line\">            word = s[start:end]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> word <span class=\"keyword\">in</span> wordSet:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.backtrack(s, wordSet, end, path + [word], result)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h2><h3 id=\"动态规划部分：\"><a href=\"#动态规划部分：\" class=\"headerlink\" title=\"动态规划部分：\"></a>动态规划部分：</h3><ol>\n<li>我们首先将 wordDict 转换为集合 wordSet，以便快速查找。</li>\n<li>然后我们初始化 dp 数组，dp[0] 为 True，表示空字符串可以被拆分。</li>\n<li>对于每个位置 i，我们遍历所有可能的 j，如果 dp[j] 为 True 且 s[j:i] 在 wordSet 中，则 dp[i] 为 True。</li>\n</ol>\n<h3 id=\"回溯部分：\"><a href=\"#回溯部分：\" class=\"headerlink\" title=\"回溯部分：\"></a>回溯部分：</h3><ol>\n<li>我们从字符串的起始位置开始，尝试所有可能的拆分点。</li>\n<li>如果当前子串在 wordSet 中，则递归处理剩余部分。</li>\n<li>当处理到字符串末尾时，将当前的拆分方式加入结果集。</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"LeetCode-140-单词拆分-II\"><a href=\"#LeetCode-140-单词拆分-II\" class=\"headerlink\" title=\"LeetCode 140. 单词拆分 II\"></a>LeetCode 140. 单词拆分 II</h1><p>LeetCode 140. 单词拆分 II 是一道经典的动态规划与回溯结合的题目。题目要求给定一个非空字符串 <code>s</code> 和一个包含非空单词列表的字典 <code>wordDict</code>，要求将字符串 <code>s</code> 拆分成由字典中的单词组成的句子，并返回所有可能的句子。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p><strong>输入:</strong><br>s &#x3D; “catsanddog”</p>\n<p>wordDict &#x3D; [“cat”, “cats”, “and”, “sand”, “dog”]</p>\n<p><strong>输出:</strong><br>[</p>\n<p>“cats and dog”,</p>\n<p>“cat sand dog”</p>\n<p>]</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这道题可以分解为两个部分：</p>\n<ol>\n<li>判断字符串是否可以拆分成字典中的单词：这一步可以通过动态规划来解决。</li>\n<li>生成所有可能的拆分方式：这一步可以通过回溯算法来解决。</li>\n</ol>\n<h3 id=\"1-动态规划判断是否可以拆分\"><a href=\"#1-动态规划判断是否可以拆分\" class=\"headerlink\" title=\"1. 动态规划判断是否可以拆分\"></a>1. 动态规划判断是否可以拆分</h3><p>我们可以使用动态规划来判断字符串 <code>s</code> 是否可以拆分成字典中的单词。定义一个布尔数组 <code>dp</code>，其中 <code>dp[i]</code> 表示字符串 <code>s</code> 的前 <code>i</code> 个字符是否可以拆分成字典中的单词。</p>\n<ul>\n<li>初始化 <code>dp[0] = True</code>，表示空字符串可以被拆分。</li>\n<li>对于每个位置 <code>i</code>，遍历所有可能的 <code>j</code>（<code>0 &lt;= j &lt; i</code>），如果 <code>dp[j]</code> 为 <code>True</code> 且 <code>s[j:i]</code> 在字典中，则 <code>dp[i] = True</code>。</li>\n</ul>\n<h3 id=\"2-回溯生成所有可能的拆分方式\"><a href=\"#2-回溯生成所有可能的拆分方式\" class=\"headerlink\" title=\"2. 回溯生成所有可能的拆分方式\"></a>2. 回溯生成所有可能的拆分方式</h3><p>在确定了字符串可以被拆分之后，我们可以使用回溯算法来生成所有可能的拆分方式。具体步骤如下：</p>\n<ul>\n<li>从字符串的起始位置开始，尝试所有可能的拆分点。</li>\n<li>如果当前子串在字典中，则递归处理剩余部分。</li>\n<li>当处理到字符串末尾时，将当前的拆分方式加入结果集。</li>\n</ul>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">wordBreak</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span>, wordDict: <span class=\"type\">List</span>[<span class=\"built_in\">str</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">str</span>]:</span><br><span class=\"line\">        <span class=\"comment\"># 将字典转换为集合，方便快速查找</span></span><br><span class=\"line\">        wordSet = <span class=\"built_in\">set</span>(wordDict)</span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 动态规划判断是否可以拆分</span></span><br><span class=\"line\">        dp = [<span class=\"literal\">False</span>] * (n + <span class=\"number\">1</span>)</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"literal\">True</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n + <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> dp[j] <span class=\"keyword\">and</span> s[j:i] <span class=\"keyword\">in</span> wordSet:</span><br><span class=\"line\">                    dp[i] = <span class=\"literal\">True</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 如果无法拆分，直接返回空列表</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> dp[n]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 回溯生成所有可能的拆分方式</span></span><br><span class=\"line\">        result = []</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.backtrack(s, wordSet, <span class=\"number\">0</span>, [], result)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">backtrack</span>(<span class=\"params\">self, s, wordSet, start, path, result</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> start == <span class=\"built_in\">len</span>(s):</span><br><span class=\"line\">            result.append(<span class=\"string\">&quot; &quot;</span>.join(path))</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> end <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(start + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(s) + <span class=\"number\">1</span>):</span><br><span class=\"line\">            word = s[start:end]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> word <span class=\"keyword\">in</span> wordSet:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.backtrack(s, wordSet, end, path + [word], result)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h2><h3 id=\"动态规划部分：\"><a href=\"#动态规划部分：\" class=\"headerlink\" title=\"动态规划部分：\"></a>动态规划部分：</h3><ol>\n<li>我们首先将 wordDict 转换为集合 wordSet，以便快速查找。</li>\n<li>然后我们初始化 dp 数组，dp[0] 为 True，表示空字符串可以被拆分。</li>\n<li>对于每个位置 i，我们遍历所有可能的 j，如果 dp[j] 为 True 且 s[j:i] 在 wordSet 中，则 dp[i] 为 True。</li>\n</ol>\n<h3 id=\"回溯部分：\"><a href=\"#回溯部分：\" class=\"headerlink\" title=\"回溯部分：\"></a>回溯部分：</h3><ol>\n<li>我们从字符串的起始位置开始，尝试所有可能的拆分点。</li>\n<li>如果当前子串在 wordSet 中，则递归处理剩余部分。</li>\n<li>当处理到字符串末尾时，将当前的拆分方式加入结果集。</li>\n</ol>\n"},{"title":"AC自动机的构建步骤","date":"2024-06-05T12:12:38.000Z","_content":"# AC自动机详解及Python实现\n\n## 什么是AC自动机？\n\nAC自动机（Aho-Corasick Automaton）是一种用于多模式字符串匹配的高效算法。它可以在一个文本中同时查找多个模式串，时间复杂度为 \\(O(n + m + z)\\)，其中 \\(n\\) 是文本长度，\\(m\\) 是所有模式串的总长度，\\(z\\) 是匹配结果的数量。\n\nAC自动机结合了字典树（Trie）和失败指针的概念，能够实现快速的多模式查找。它首先构建一个字典树，然后为每个节点建立失败指针，从而在匹配过程中能够有效地回溯。\n\n## AC自动机的构建步骤\n\n1. **构建字典树**：将所有模式串插入到字典树中。\n2. **建立失败指针**：为字典树中的每个节点建立失败指针，指向该节点的最长后缀匹配节点。\n3. **匹配过程**：在文本中逐字符匹配，利用字典树和失败指针快速找到所有模式串。\n\n## Python实现\n\n以下是一个简单的AC自动机实现示例，包含字典树的构建、失败指针的建立以及匹配过程。\n\n```python\nclass ACNode:\n    def __init__(self):\n        self.children = {}\n        self.fail = None\n        self.output = []\n\nclass ACAutomaton:\n    def __init__(self):\n        self.root = ACNode()\n\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = ACNode()\n            node = node.children[char]\n        node.output.append(word)\n\n    def build_failure_pointers(self):\n        from collections import deque\n        queue = deque()\n        # Initialize the first level children of root\n        for child in self.root.children.values():\n            child.fail = self.root\n            queue.append(child)\n\n        while queue:\n            current_node = queue.popleft()\n            \n            for char, child in current_node.children.items():\n                # Find the fail pointer\n                fail_node = current_node.fail\n                while fail_node and char not in fail_node.children:\n                    fail_node = fail_node.fail\n                child.fail = fail_node.children[char] if fail_node else self.root\n                # Merge output lists\n                if child.fail:\n                    child.output += child.fail.output\n                queue.append(child)\n\n    def search(self, text):\n        node = self.root\n        results = []\n        \n        for index, char in enumerate(text):\n            while node and char not in node.children:\n                node = node.fail\n            if not node:\n                node = self.root\n                continue\n            node = node.children[char]\n            if node.output:\n                for pattern in node.output:\n                    results.append((index - len(pattern) + 1, pattern))\n        \n        return results\n```\n\n### 示例用法\n``` python\nif __name__ == \"__main__\":\n    patterns = [\"he\", \"she\", \"his\", \"hers\"]\n    text = \"ushers\"\n\n    ac = ACAutomaton()\n    for pattern in patterns:\n        ac.insert(pattern)\n    \n    ac.build_failure_pointers()\n    \n    results = ac.search(text)\n    for index, pattern in results:\n        print(f\"找到模式 '{pattern}' 在索引 {index}\")\n```\n\n## 代码解析\n1. ACNode类：每个节点包含一个字典（children）用于存储子节点，一个失败指针（fail），以及一个输出列表（output）用于存储匹配模式。\n2. ACAutomaton类：包含插入模式串的方法（insert），构建失败指针的方法（build_failure_pointers），以及搜索文本的方法（search）。\n3. 搜索过程：通过逐字符匹配文本，如果当前节点没有对应的子节点，则沿着失败指针回溯，直到找到匹配或回到根节点。\n## 总结\nAC自动机是一种高效的多模式匹配算法，非常适合用于字符串搜索、文本分析等场景。通过构建字典树和失败指针，AC自动机能够在复杂度上优于传统的逐一匹配方法。希望本文能够帮助你理解AC自动机的基本原理及其在Python中的实现。\n","source":"_posts/ac-machine.md","raw":"---\ntitle: AC自动机的构建步骤\ndate: 2024-06-05 20:12:38\ntags: 算法\n---\n# AC自动机详解及Python实现\n\n## 什么是AC自动机？\n\nAC自动机（Aho-Corasick Automaton）是一种用于多模式字符串匹配的高效算法。它可以在一个文本中同时查找多个模式串，时间复杂度为 \\(O(n + m + z)\\)，其中 \\(n\\) 是文本长度，\\(m\\) 是所有模式串的总长度，\\(z\\) 是匹配结果的数量。\n\nAC自动机结合了字典树（Trie）和失败指针的概念，能够实现快速的多模式查找。它首先构建一个字典树，然后为每个节点建立失败指针，从而在匹配过程中能够有效地回溯。\n\n## AC自动机的构建步骤\n\n1. **构建字典树**：将所有模式串插入到字典树中。\n2. **建立失败指针**：为字典树中的每个节点建立失败指针，指向该节点的最长后缀匹配节点。\n3. **匹配过程**：在文本中逐字符匹配，利用字典树和失败指针快速找到所有模式串。\n\n## Python实现\n\n以下是一个简单的AC自动机实现示例，包含字典树的构建、失败指针的建立以及匹配过程。\n\n```python\nclass ACNode:\n    def __init__(self):\n        self.children = {}\n        self.fail = None\n        self.output = []\n\nclass ACAutomaton:\n    def __init__(self):\n        self.root = ACNode()\n\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = ACNode()\n            node = node.children[char]\n        node.output.append(word)\n\n    def build_failure_pointers(self):\n        from collections import deque\n        queue = deque()\n        # Initialize the first level children of root\n        for child in self.root.children.values():\n            child.fail = self.root\n            queue.append(child)\n\n        while queue:\n            current_node = queue.popleft()\n            \n            for char, child in current_node.children.items():\n                # Find the fail pointer\n                fail_node = current_node.fail\n                while fail_node and char not in fail_node.children:\n                    fail_node = fail_node.fail\n                child.fail = fail_node.children[char] if fail_node else self.root\n                # Merge output lists\n                if child.fail:\n                    child.output += child.fail.output\n                queue.append(child)\n\n    def search(self, text):\n        node = self.root\n        results = []\n        \n        for index, char in enumerate(text):\n            while node and char not in node.children:\n                node = node.fail\n            if not node:\n                node = self.root\n                continue\n            node = node.children[char]\n            if node.output:\n                for pattern in node.output:\n                    results.append((index - len(pattern) + 1, pattern))\n        \n        return results\n```\n\n### 示例用法\n``` python\nif __name__ == \"__main__\":\n    patterns = [\"he\", \"she\", \"his\", \"hers\"]\n    text = \"ushers\"\n\n    ac = ACAutomaton()\n    for pattern in patterns:\n        ac.insert(pattern)\n    \n    ac.build_failure_pointers()\n    \n    results = ac.search(text)\n    for index, pattern in results:\n        print(f\"找到模式 '{pattern}' 在索引 {index}\")\n```\n\n## 代码解析\n1. ACNode类：每个节点包含一个字典（children）用于存储子节点，一个失败指针（fail），以及一个输出列表（output）用于存储匹配模式。\n2. ACAutomaton类：包含插入模式串的方法（insert），构建失败指针的方法（build_failure_pointers），以及搜索文本的方法（search）。\n3. 搜索过程：通过逐字符匹配文本，如果当前节点没有对应的子节点，则沿着失败指针回溯，直到找到匹配或回到根节点。\n## 总结\nAC自动机是一种高效的多模式匹配算法，非常适合用于字符串搜索、文本分析等场景。通过构建字典树和失败指针，AC自动机能够在复杂度上优于传统的逐一匹配方法。希望本文能够帮助你理解AC自动机的基本原理及其在Python中的实现。\n","slug":"ac-machine","published":1,"updated":"2025-02-19T09:19:44.026Z","_id":"cm7bp8pij0000qoa7gqzabq40","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"AC自动机详解及Python实现\"><a href=\"#AC自动机详解及Python实现\" class=\"headerlink\" title=\"AC自动机详解及Python实现\"></a>AC自动机详解及Python实现</h1><h2 id=\"什么是AC自动机？\"><a href=\"#什么是AC自动机？\" class=\"headerlink\" title=\"什么是AC自动机？\"></a>什么是AC自动机？</h2><p>AC自动机（Aho-Corasick Automaton）是一种用于多模式字符串匹配的高效算法。它可以在一个文本中同时查找多个模式串，时间复杂度为 (O(n + m + z))，其中 (n) 是文本长度，(m) 是所有模式串的总长度，(z) 是匹配结果的数量。</p>\n<p>AC自动机结合了字典树（Trie）和失败指针的概念，能够实现快速的多模式查找。它首先构建一个字典树，然后为每个节点建立失败指针，从而在匹配过程中能够有效地回溯。</p>\n<h2 id=\"AC自动机的构建步骤\"><a href=\"#AC自动机的构建步骤\" class=\"headerlink\" title=\"AC自动机的构建步骤\"></a>AC自动机的构建步骤</h2><ol>\n<li><strong>构建字典树</strong>：将所有模式串插入到字典树中。</li>\n<li><strong>建立失败指针</strong>：为字典树中的每个节点建立失败指针，指向该节点的最长后缀匹配节点。</li>\n<li><strong>匹配过程</strong>：在文本中逐字符匹配，利用字典树和失败指针快速找到所有模式串。</li>\n</ol>\n<h2 id=\"Python实现\"><a href=\"#Python实现\" class=\"headerlink\" title=\"Python实现\"></a>Python实现</h2><p>以下是一个简单的AC自动机实现示例，包含字典树的构建、失败指针的建立以及匹配过程。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ACNode</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.children = &#123;&#125;</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.fail = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.output = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ACAutomaton</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.root = ACNode()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">insert</span>(<span class=\"params\">self, word</span>):</span><br><span class=\"line\">        node = <span class=\"variable language_\">self</span>.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> node.children:</span><br><span class=\"line\">                node.children[char] = ACNode()</span><br><span class=\"line\">            node = node.children[char]</span><br><span class=\"line\">        node.output.append(word)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">build_failure_pointers</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque</span><br><span class=\"line\">        queue = deque()</span><br><span class=\"line\">        <span class=\"comment\"># Initialize the first level children of root</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> child <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>.root.children.values():</span><br><span class=\"line\">            child.fail = <span class=\"variable language_\">self</span>.root</span><br><span class=\"line\">            queue.append(child)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            current_node = queue.popleft()</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span> char, child <span class=\"keyword\">in</span> current_node.children.items():</span><br><span class=\"line\">                <span class=\"comment\"># Find the fail pointer</span></span><br><span class=\"line\">                fail_node = current_node.fail</span><br><span class=\"line\">                <span class=\"keyword\">while</span> fail_node <span class=\"keyword\">and</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> fail_node.children:</span><br><span class=\"line\">                    fail_node = fail_node.fail</span><br><span class=\"line\">                child.fail = fail_node.children[char] <span class=\"keyword\">if</span> fail_node <span class=\"keyword\">else</span> <span class=\"variable language_\">self</span>.root</span><br><span class=\"line\">                <span class=\"comment\"># Merge output lists</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> child.fail:</span><br><span class=\"line\">                    child.output += child.fail.output</span><br><span class=\"line\">                queue.append(child)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">search</span>(<span class=\"params\">self, text</span>):</span><br><span class=\"line\">        node = <span class=\"variable language_\">self</span>.root</span><br><span class=\"line\">        results = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> index, char <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(text):</span><br><span class=\"line\">            <span class=\"keyword\">while</span> node <span class=\"keyword\">and</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> node.children:</span><br><span class=\"line\">                node = node.fail</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node:</span><br><span class=\"line\">                node = <span class=\"variable language_\">self</span>.root</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            node = node.children[char]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node.output:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> pattern <span class=\"keyword\">in</span> node.output:</span><br><span class=\"line\">                    results.append((index - <span class=\"built_in\">len</span>(pattern) + <span class=\"number\">1</span>, pattern))</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> results</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例用法\"><a href=\"#示例用法\" class=\"headerlink\" title=\"示例用法\"></a>示例用法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    patterns = [<span class=\"string\">&quot;he&quot;</span>, <span class=\"string\">&quot;she&quot;</span>, <span class=\"string\">&quot;his&quot;</span>, <span class=\"string\">&quot;hers&quot;</span>]</span><br><span class=\"line\">    text = <span class=\"string\">&quot;ushers&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ac = ACAutomaton()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> pattern <span class=\"keyword\">in</span> patterns:</span><br><span class=\"line\">        ac.insert(pattern)</span><br><span class=\"line\">    </span><br><span class=\"line\">    ac.build_failure_pointers()</span><br><span class=\"line\">    </span><br><span class=\"line\">    results = ac.search(text)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index, pattern <span class=\"keyword\">in</span> results:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;找到模式 &#x27;<span class=\"subst\">&#123;pattern&#125;</span>&#x27; 在索引 <span class=\"subst\">&#123;index&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码解析\"><a href=\"#代码解析\" class=\"headerlink\" title=\"代码解析\"></a>代码解析</h2><ol>\n<li>ACNode类：每个节点包含一个字典（children）用于存储子节点，一个失败指针（fail），以及一个输出列表（output）用于存储匹配模式。</li>\n<li>ACAutomaton类：包含插入模式串的方法（insert），构建失败指针的方法（build_failure_pointers），以及搜索文本的方法（search）。</li>\n<li>搜索过程：通过逐字符匹配文本，如果当前节点没有对应的子节点，则沿着失败指针回溯，直到找到匹配或回到根节点。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>AC自动机是一种高效的多模式匹配算法，非常适合用于字符串搜索、文本分析等场景。通过构建字典树和失败指针，AC自动机能够在复杂度上优于传统的逐一匹配方法。希望本文能够帮助你理解AC自动机的基本原理及其在Python中的实现。</p>\n","excerpt":"","more":"<h1 id=\"AC自动机详解及Python实现\"><a href=\"#AC自动机详解及Python实现\" class=\"headerlink\" title=\"AC自动机详解及Python实现\"></a>AC自动机详解及Python实现</h1><h2 id=\"什么是AC自动机？\"><a href=\"#什么是AC自动机？\" class=\"headerlink\" title=\"什么是AC自动机？\"></a>什么是AC自动机？</h2><p>AC自动机（Aho-Corasick Automaton）是一种用于多模式字符串匹配的高效算法。它可以在一个文本中同时查找多个模式串，时间复杂度为 (O(n + m + z))，其中 (n) 是文本长度，(m) 是所有模式串的总长度，(z) 是匹配结果的数量。</p>\n<p>AC自动机结合了字典树（Trie）和失败指针的概念，能够实现快速的多模式查找。它首先构建一个字典树，然后为每个节点建立失败指针，从而在匹配过程中能够有效地回溯。</p>\n<h2 id=\"AC自动机的构建步骤\"><a href=\"#AC自动机的构建步骤\" class=\"headerlink\" title=\"AC自动机的构建步骤\"></a>AC自动机的构建步骤</h2><ol>\n<li><strong>构建字典树</strong>：将所有模式串插入到字典树中。</li>\n<li><strong>建立失败指针</strong>：为字典树中的每个节点建立失败指针，指向该节点的最长后缀匹配节点。</li>\n<li><strong>匹配过程</strong>：在文本中逐字符匹配，利用字典树和失败指针快速找到所有模式串。</li>\n</ol>\n<h2 id=\"Python实现\"><a href=\"#Python实现\" class=\"headerlink\" title=\"Python实现\"></a>Python实现</h2><p>以下是一个简单的AC自动机实现示例，包含字典树的构建、失败指针的建立以及匹配过程。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ACNode</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.children = &#123;&#125;</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.fail = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.output = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ACAutomaton</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.root = ACNode()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">insert</span>(<span class=\"params\">self, word</span>):</span><br><span class=\"line\">        node = <span class=\"variable language_\">self</span>.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> node.children:</span><br><span class=\"line\">                node.children[char] = ACNode()</span><br><span class=\"line\">            node = node.children[char]</span><br><span class=\"line\">        node.output.append(word)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">build_failure_pointers</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque</span><br><span class=\"line\">        queue = deque()</span><br><span class=\"line\">        <span class=\"comment\"># Initialize the first level children of root</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> child <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>.root.children.values():</span><br><span class=\"line\">            child.fail = <span class=\"variable language_\">self</span>.root</span><br><span class=\"line\">            queue.append(child)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            current_node = queue.popleft()</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span> char, child <span class=\"keyword\">in</span> current_node.children.items():</span><br><span class=\"line\">                <span class=\"comment\"># Find the fail pointer</span></span><br><span class=\"line\">                fail_node = current_node.fail</span><br><span class=\"line\">                <span class=\"keyword\">while</span> fail_node <span class=\"keyword\">and</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> fail_node.children:</span><br><span class=\"line\">                    fail_node = fail_node.fail</span><br><span class=\"line\">                child.fail = fail_node.children[char] <span class=\"keyword\">if</span> fail_node <span class=\"keyword\">else</span> <span class=\"variable language_\">self</span>.root</span><br><span class=\"line\">                <span class=\"comment\"># Merge output lists</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> child.fail:</span><br><span class=\"line\">                    child.output += child.fail.output</span><br><span class=\"line\">                queue.append(child)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">search</span>(<span class=\"params\">self, text</span>):</span><br><span class=\"line\">        node = <span class=\"variable language_\">self</span>.root</span><br><span class=\"line\">        results = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> index, char <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(text):</span><br><span class=\"line\">            <span class=\"keyword\">while</span> node <span class=\"keyword\">and</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> node.children:</span><br><span class=\"line\">                node = node.fail</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node:</span><br><span class=\"line\">                node = <span class=\"variable language_\">self</span>.root</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            node = node.children[char]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node.output:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> pattern <span class=\"keyword\">in</span> node.output:</span><br><span class=\"line\">                    results.append((index - <span class=\"built_in\">len</span>(pattern) + <span class=\"number\">1</span>, pattern))</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> results</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例用法\"><a href=\"#示例用法\" class=\"headerlink\" title=\"示例用法\"></a>示例用法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    patterns = [<span class=\"string\">&quot;he&quot;</span>, <span class=\"string\">&quot;she&quot;</span>, <span class=\"string\">&quot;his&quot;</span>, <span class=\"string\">&quot;hers&quot;</span>]</span><br><span class=\"line\">    text = <span class=\"string\">&quot;ushers&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ac = ACAutomaton()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> pattern <span class=\"keyword\">in</span> patterns:</span><br><span class=\"line\">        ac.insert(pattern)</span><br><span class=\"line\">    </span><br><span class=\"line\">    ac.build_failure_pointers()</span><br><span class=\"line\">    </span><br><span class=\"line\">    results = ac.search(text)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index, pattern <span class=\"keyword\">in</span> results:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;找到模式 &#x27;<span class=\"subst\">&#123;pattern&#125;</span>&#x27; 在索引 <span class=\"subst\">&#123;index&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码解析\"><a href=\"#代码解析\" class=\"headerlink\" title=\"代码解析\"></a>代码解析</h2><ol>\n<li>ACNode类：每个节点包含一个字典（children）用于存储子节点，一个失败指针（fail），以及一个输出列表（output）用于存储匹配模式。</li>\n<li>ACAutomaton类：包含插入模式串的方法（insert），构建失败指针的方法（build_failure_pointers），以及搜索文本的方法（search）。</li>\n<li>搜索过程：通过逐字符匹配文本，如果当前节点没有对应的子节点，则沿着失败指针回溯，直到找到匹配或回到根节点。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>AC自动机是一种高效的多模式匹配算法，非常适合用于字符串搜索、文本分析等场景。通过构建字典树和失败指针，AC自动机能够在复杂度上优于传统的逐一匹配方法。希望本文能够帮助你理解AC自动机的基本原理及其在Python中的实现。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cm7bn0tjq0002m4a7e5ge21sm","tag_id":"cm7bn0tju0004m4a7b3wvhpf7","_id":"cm7bn0tjv0006m4a77tb95tad"},{"post_id":"cm7bo4yk70000c4a7fsnh1yue","tag_id":"cm7bo4yka0001c4a77buv878j","_id":"cm7bo4ykb0002c4a7fn57axyb"},{"post_id":"cm7boue7t0000pwa7ff7th9q1","tag_id":"cm7bo4yka0001c4a77buv878j","_id":"cm7boz4gu0001pwa70r0768w2"},{"post_id":"cm7bp8pij0000qoa7gqzabq40","tag_id":"cm7bpalu70001qoa7bnvw4ass","_id":"cm7bpalu70002qoa7aepxh0m6"}],"Tag":[{"name":"test","_id":"cm7bn0tju0004m4a7b3wvhpf7"},{"name":"leetcode","_id":"cm7bo4yka0001c4a77buv878j"},{"name":"算法","_id":"cm7bpalu70001qoa7bnvw4ass"}]}}